 
   Hash functions in ruby
A Hash maps each of its unique keys to a specific value.
A Hash has certain similarities to an Array,but
An Array index is always an Integer.
A Hash key can be (almost) any object.

1.creating a Hash function
3.0.0 :002 > h=Hash.new # create a empty Hash
 => {} 
3.0.0 :003 > h=Hash[]
 => {} 
3.0.0 :004 > h=Hash[foo:0,bar:1,baz:2] # create a Hash with initial enteries
 => {:foo=>0, :bar=>1, :baz=>2} 

** The initial default value and initial default proc for the new hash depend on which form above was used.
3.0.0 :005 > h=Hash.new
 => {} 
3.0.0 :006 > h.default
 => nil 
3.0.0 :007 > h=Hash.new(false)
 => {} 
3.0.0 :008 > h.default
 => false 
3.0.0 :009 > h=Hash.new(true)
 => {} 
3.0.0 :010 > h.default
 => true 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.Public instance methods
 a. hash < other_hash → true or false #Returns true if hash is a proper subset of other_hash, false otherwise 
** proper subset means if a is a proper subset of b the a have all elements present in b but b has 1 element that has not present in a
3.0.0 :011 > h1={a:0,b:1}
 => {:a=>0, :b=>1} 
3.0.0 :012 > h2={a:0,b:1,c:3}
 => {:a=>0, :b=>1, :c=>3} 
3.0.0 :013 > h1<h2
 => true 
3.0.0 :014 > h1>h2
 => false 

 b. hash <= other_hash → true or false # return true if h1 Hash is the subset of second Hash otherwise false
** subset means if a is a subset of b then all elements of a present in b
3.0.0 :011 > h1={a:0,b:1}
 => {:a=>0, :b=>1} 
3.0.0 :012 > h2={a:0,b:1,c:3}
 => {:a=>0, :b=>1, :c=>3} 
3.0.0 :013 > h1<=h2
 => true 
3.0.0 :014 > h2<=h1
 => false 

c. hash == object → true or false
 object is a Hash object.
 hash and object have the same keys (regardless of order).
 For each key ,hash[key] == object[key].
 Otherwise, returns false.
 => {:h1=>0, :h2=>1, :h3=>2} 
 => {:h1=>0, :h2=>1, :h3=>2} 
3.0.0 :004 > a==b
 => true 
3.0.0 :005 > c={h3:2,h2:1,h1:0}
 => {:h3=>2, :h2=>1, :h1=>0} 
3.0.0 :006 > c==a
 => true 
3.0.0 :007 > b==a
 => true 
3.0.0 :008 > a={ram:2,simran:1}
 => {:ram=>2, :simran=>1} 
3.0.0 :009 > b={ram1:2,simran1:1}
 => {:ram1=>2, :simran1=>1} 
3.0.0 :010 > a==b
 => false 

d. hash[key] → value # return the value associated with the given key

3.0.0 :023 > a={a1:2,a2:3}
 => {:a1=>2, :a2=>3} 
3.0.0 :024 > a[:a1]
 => 2 
** if no such value present return nil
3.0.0 :025 > a[:a8]
 => nil 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Replacing  the key value # if hash value is present then it easily changed 
a={a1:2,a2:3}
3.0.0 :026 > a[:a2]=9
 => 9 
3.0.0 :027 > a
 => {:a1=>2, :a2=>9} 
 ** add new keyvalue pair in hashing 
3.0.0 :029 > a[:a3]=10
 => 10 
3.0.0 :032 > a
 => {:a1=>2, :a2=>9, :a3=>10, :a4=>10}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.any? method # return true if all criteria satisfied the given criteria otherwise false
3.0.0 :006 > a.any?([:a2,1])
 => false 
3.0.0 :007 > a.any?([:a4,1])
 => true 
any? {|key, value| ... } → true or false
3.0.0 :010 > a.any? {|key,value| value<5}
 => true 
3.0.0 :011 > a.any? {|key,value| value>4}
 => false 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.assoc(key) -> new_array or nil # if given hash key is found its return an array of key value pair otherwise nil
 => {:a1=>0, :a2=>2, :a3=>4, :a4=>1} 
3.0.0 :013 > a.assoc(:a2)
 => [:a2, 2] 
 
** clear method
3.0.0 :014 > a.clear
 => {} 
3.0.0 :015 > a
 => {} 

** compact method
3.0.0 :020 > a[:a9]=nil
 => nil 
3.0.0 :021 > a[:a11]=nil
 => nil 
3.0.0 :022 > a
 => {:a1=>2, :a2=>1, :a3=>0, :a4=>nil, :a9=>nil, :a11=>nil} 
3.0.0 :023 > a.compact
 => {:a1=>2, :a2=>1, :a3=>0} 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



