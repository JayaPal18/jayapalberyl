

    Array in Ruby
An Array is an ordered, integer-indexed collection of objects, called elements. Any object may be an Array element.
 3.0.0 :001 > array=['ram',1,2,3,nil]
 => ["ram", 1, 2, 3, nil] 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. creating array object

 3.0.0 :002 > arr=Array.new
 => [] 

 creating multidimensional array
 3.0.0 :003 > arr=Array.new(3) {Array.new(3)}
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 
 3.0.0 :004 > arr=Array.new(2) {Array.new(2)}
 => [[nil, nil], [nil, nil]] 

if donot assign values in an array its shows null
3.0.0 :028 > Array.new(10)
 => [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. find out element in particular index
3.0.0 :005 > arr=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.0 :006 > arr[2]
 => 3 
3.0.0 :007 > arr[-2]
 => 4 
3.0.0 :008 > arr[2,4]
 => [3, 4, 5]
 3.0.0 :009 > arr.at(0)
 => 1
3.0.0 :016 > a=[1,"jaya",2]
3.0.0 :022 > a[0,2]
 => [1, "jaya"] 
3.0.0 :023 > a[0..2]
 => [1, "jaya", 2] 
3.0.0 :024 > a[0..4]
 => [1, "jaya", 2]  

*at_index
3.0.0 :045 > a
 => [1, "jaya", 2] 
3.0.0 :046 > a.at(1)
 => "jaya" 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. finding first and last index,take,drop particular element in  array
3.0.0 :010 > arr.first
 => 1 
3.0.0 :012 > arr.last
 => 5 
3.0.0 :013 > arr.take(2)
 => [1, 2] 
3.0.0 :014 > arr.drop(2)
 => [3, 4, 5] 
3.0.0 :015 > arr
 => [1, 2, 3, 4, 5] 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. empty?,length,include?,count with for each loop function
3.0.0 :016 > arr.length
 => 5 
3.0.0 :017 > arr.empty?
 => false 
3.0.0 :018 > arr.include?('raman')
 => false 
count particular element by for each loops
3.0.0 :025 > [0,1,2,3,4,5].count {|element| element > 1}
 => 4 
3.0.0 :026 > [0,1,2,3,4,5].count {|element| element > 0.3}
 => 5 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. adding elements in array methods like:
push function # it can add the element at the end
3.0.0 :019 > arr1=['jaya','monika','prem','kuldeep']
 => ["jaya", "monika", "prem", "kuldeep"] 
3.0.0 :020 > arr1.push('sandeep')
 => ["jaya", "monika", "prem", "kuldeep", "sandeep"] 

unshift function() # add element in front of the array
3.0.0 :022 > arr1.unshift('kamal')
 => ["kamal", "jaya", "monika", "prem", "kuldeep", "sandeep"] 

<< operator # used to add value at the end of function
3.0.0 :023 > arr1 << ('kamal')
 => ["kamal", "jaya", "monika", "prem", "kuldeep", "sandeep", "kamal"] 

insert()
3.0.0 :029 > a1=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.0 :030 > a1.insert(3,"apple")
 => [1, 2, 3, "apple", 4, 5] 
3.0.0 :031 > a1.insert(3,"ram","sharma","kunal")
 => [1, 2, 3, "ram", "sharma", "kunal", "apple", 4, 5] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Removing elements in array methods like:
pop() # it can delete the element at the end
3.0.0 :004 > array.pop
 => 9 
3.0.0 :005 > array
 => [1, 2, 3, 4, 5, 6, 7, 8] 

shift method # used to retrieve and delete value in an array
3.0.0 :007 > array.shift
 => 1 
3.0.0 :008 > array
 => [2, 3, 4, 5, 6, 7, 8, 10] 

delete a value at particular index
3.0.0 :011 > array.delete_at(5)
 => 8 
3.0.0 :012 > array
 => [3, 4, 5, 6, 7, 10] 
* to delete anywhere in the list used delete function
=> [3, 4, 5, 6, 7, 10, 3] 
3.0.0 :014 > array.delete(3)
 => 3 
3.0.0 :015 > array

compact method # if you want to delete a nil values in the function
=> [4, 5, 6, 7, 10, nil, nil]
3.0.0 :019 > array.compact
 => [4, 5, 6, 7, 10] 

uniq method # used to remove the duplicate methods in an array
3.0.0 :020 > array.push(5)
 => [4, 5, 6, 7, 10, nil, nil, 5] 
3.0.0 :021 > array.uniq
 => [4, 5, 6, 7, 10, nil] 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.iterating over an array methods like:
iterating over array
3.0.0 :022 > a2=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.0 :023 > a2.each{|a| print a-=10," "}
-9 -8 -7 -6  => [1, 2, 3, 4] 

map method
3.0.0 :008 > a=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.0 :009 > a.map{|a| 2*a}
 => [2, 4, 6, 8, 10] 
3.0.0 :010 > a.map{|a| 2**a}
 => [2, 4, 8, 16, 32] 
3.0.0 :011 > a.map{|a| a**2}
 => [1, 4, 9, 16, 25] 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Non destructive selection:
select,drop,reject methods
3.0.0 :012 > a.select {|a| a>3}
 => [4, 5] 
3.0.0 :013 > a.reject {|a| a>3}
 => [1, 2, 3] 
 => [1, 2, 3, 4, 5]
3.0.0 :140 > a1=['jaya','pal','jayesh',1,2,3,'jiva']
 => ["jaya", "pal", "jayesh", 1, 2, 3, "jiva"] 
3.0.0 :142 > a1.reject{ |value| value.to_s.start_with?('j')}
 => ["pal", 1, 2, 3]
3.0.0 :015 > a.drop_while {|a| a<3}
 => [3, 4, 5] 

9.destructive selection array methods like:
 a1.delete_if,a1.keep_if
3.0.0 :019 > a1=[1,2,3,4,5,6,7,8]
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.0 :020 > a1.delete_if {|a1| a1<5}
 => [5, 6, 7, 8] 

3.0.0 :025 > a1=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.0 :026 > a1.keep_if {|a1| a1<3}
 => [1, 2] 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
22.Array indexing
3.0.0 :038 > a=Array.new(3) {|index| "element #{index}"}
 => ["element 0", "element 1", "element 2"] 
3.0.0 :039 > a=Array.new(3) {|index| "Jayapal #{index}"}
 => ["Jayapal 0", "Jayapal 1", "Jayapal 2"] 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.methods for querying:
for each loop to check conditions
3.0.0 :035 > [0,1,2,3].all? { |element| element<3}
 => false 
3.0.0 :037 > [0,1,2,3].all? { |value| value<4}
 => true 

any? method # this method return true if any true value is given otherwise return false if any only nil and false value given
3.0.0 :038 > [nil,false].any?
 => false 
3.0.0 :039 > [nil,false,true].any?
 => true 
3.0.0 :040 > [nil,nil,nil].any?
 => false 
3.0.0 :042 > [1,2,3,4].any? {|value| value<2}
 => true 
3.0.0 :043 > [1,2,3,4].any? {|value| value>5}
 => false 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. compairing methods like:
comparison operator # <=>
3.0.0 :012 > [0,1,2] <=>[-1,0,1]
 => 1 
3.0.0 :013 > [0,1,2] <=>[-1,2,3]
 => 1 
3.0.0 :014 > [-2,-1,0] <=>[-1,2,3]
 => -1 
3.0.0 :015 > [-1,2,3] <=>[-1,2,3]
 => 0 

to check whether element is present or not
3.0.0 :063 > a.bsearch {|x| 2 <=> x}
 => 2 
3.0.0 :064 > a.bsearch {|x| 7 <=> x}
 => nil 

comparision with map function
3.0.0 :067 > a << -1
 => [1, 2, 3, 4, -1] 
3.0.0 :068 > a.map {|x| 1<=> x}
 => [0, -1, -1, -1, 1] 
3.0.0 :069 > a.map {|x| 2<=> x}
 => [1, 0, -1, -1, 1] 
3.0.0 :070 > a.map {|x| -1<=> x}
 => [-1, -1, -1, -1, 0] 
3.0.0 :071 > a.map {|x| 8<=> x}
 => [1, 1, 1, 1, 1] 
3.0.0 :072 > a.map {|x| 4<=> x}
 => [1, 1, 1, 0, 1] 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. methods for fetching:
=> fetch function return the value of particular index but index function return particular index which we found at.
3.0.0 :010 > a=[1,2,3,4,5,"jaya"]
 => [1, 2, 3, 4, 5, "jaya"] 
3.0.0 :011 > a.fetch(3)
 => 4 
3.0.0 :012 > a.first(3)
 => [1, 2, 3] 
3.0.0 :013 > a.last(3)
 => [4, 5, "jaya"] 

* rindex return the index if value have repeated then if i searched the last index value we us rindex
3.0.0 :030 > a1
 => [1, 2, 3, 4, 5, 6, 3] 
3.0.0 :031 > a1.index(3)
 => 2 
3.0.0 :032 > a1.rindex(3)
 => 6 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

13. Removing duplicate array
3.0.0 :040 > [0,1,2,3,4]&[1,2,3]
 => [1, 2, 3] 
3.0.0 :041 > ["jaya","pal"]&["jaya"]
 => ["jaya"] 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
14.repeating the array,concatenate array
3.0.0 :001 > a1=[1,4,5]
 => [1, 4, 5] 
3.0.0 :002 > a1 * 2
 => [1, 4, 5, 1, 4, 5]

3.0.0 :005 > j=[1,2,3]+[4,5,6]
 => [1, 2, 3, 4, 5, 6] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. array - other_array â†’ new_array
3.0.0 :005 > j=[1,2,3]+[4,5,6]
 => [1, 2, 3, 4, 5, 6] 
3.0.0 :006 > [0,1,1,2,1,1,3,1,1]-[1]
 => [0, 2, 3] 
3.0.0 :007 > [0,1,1,2,1,1,3,1,1]-[3,0]
 => [1, 1, 2, 1, 1, 1, 1] 
3.0.0 :008 > [0,1,1,2,1,1,3,1,1]-[3,0,1]
 => [2] 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
16.append value in an array
3.0.0 :010 > a1
 => [1, 4, 5] 
3.0.0 :011 > a1 << 4  
 => [1, 4, 5, 4] 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
17.binary_search[ return only minimum  value which satisfy the condition
3.0.0 :051 > a.bsearch {|x| x>2}
 => 3 
3.0.0 :052 > a.bsearch {|x| x>4}
 => nil 
3.0.0 :053 > a.bsearch {|x| x<4}
 => 1 
3.0.0 :053 > a.bsearch {|x| x<3}
 => nil

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. clear
3.0.0 :073 > a
 => [1, 2, 3, 4, -1] 
3.0.0 :074 > a.clear
 => [] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
19.to know the particular datatypes of array we used 
3.0.0 :075 > a=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.0 :076 > a1=a.map{|element| element.class}
 => [Integer, Integer, Integer, Integer] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. combination method
3.0.0 :006 > a.combination(2) {|values| p values}
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]
 => [1, 2, 3, 4] 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

21. compact method #return all nill values
 => [1, 2, 3, 4, nil, nil, 10] 
3.0.0 :012 > a.compact
 => [1, 2, 3, 4, 10] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. difference(*other_arrays) â†’ new_array # return the values except which i mention that
3.0.0 :033 > [0,1,2,2,1,1,3,1,1].difference([1])
 => [0, 2, 2, 3] 
3.0.0 :034 > [0,1,2,2,1,1,3,1,1].difference([4])
 => [0, 1, 2, 2, 1, 1, 3, 1, 1] 
3.0.0 :035 > [0,1,2,2,1,1,3,1,1].difference([2])
 => [0, 1, 1, 1, 3, 1, 1] 

dig method # return array of array values
3.0.0 :072 > arr=[1,[1,2,[3,4]]]
 => [1, [1, 2, [3, 4]]] 
3.0.0 :073 > a.dig(1)
 => "a" 
3.0.0 :074 > arr.dig(1)
 => [1, 2, [3, 4]] 
3.0.0 :075 > arr.dig(1,2)
 => [3, 4] 
3.0.0 :076 > arr.dig(1,2,0)
 => 3 


drop method delete the particular element at starting but if we drop(0) then it doesnot delete any element
3.0.0 :036 > a1
 => [1, 2, 3, 4, 5, 6, 3] 
3.0.0 :037 > a1.drop(0)
 => [1, 2, 3, 4, 5, 6, 3] 
3.0.0 :038 > a1.drop(1)
 => [2, 3, 4, 5, 6, 3] 
3.0.0 :039 > a1.drop(2)
 => [3, 4, 5, 6, 3] 

* drop_while method
 => [3, 4, 5, 6, 3] 
3.0.0 :040 > a1.drop_while {|value| value < 4}
 => [4, 5, 6, 3] 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. each loop
3.0.0 :041 > s1=[:foo,'bar',2,3]
 => [:foo, "bar", 2, 3] 
3.0.0 :042 > s1.each {|element| puts "#{element.class}  #{element}"}
Symbol  foo
String  bar
Integer  2
Integer  3
 => [:foo, "bar", 2, 3] 
* to know the index and value 

s1 => [:foo, "bar", 2, 3] 
3.0.0 :049 > s1.each_index{|index| puts "#{index}  #{s1[index]}"}
0  foo
1  bar
2  2
3  3

3.0.0 :058 > a1.fetch(50) {|indexvalue|   "value for #{indexvalue}" } # return the same content which i mention in return statement when fetch value is not in the list
 => "value for 50" 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
24.hash method # Two arrays with the same content will have the same hash code (and will compare using eql?):
3.0.0 :069 > [0,1,2].hash == [0,1,2].hash
 => true 
3.0.0 :070 > [0,1,2].hash == [0,1,6].hash
 => false 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. zip() # this method basically add elements in an array format just it is declared in
3.0.0 :002 > a=[:a0,:a1,:a2,:a3]
 => [:a0, :a1, :a2, :a3] 
3.0.0 :003:> b=[:b0,:b1,:b2,:b3]
 => [:b0, :b1, :b2, :b3] 
3.0.0 :004:> c=[:c0,:c1,:c2,:c3]
 => [:c0, :c1, :c2, :c3] 
3.0.0 :005 > d=a.zip(b,c)
 => [[:a0, :b0, :c0], [:a1, :b1, :c1], [:a2, :b2, :c2], [:a3, :b3, :c3]] 

** If any array in other_arrays is smaller than self, fills to self.size with nil:
 3.0.0 :023 > a
 => [:a3, :a0, :a1, :a2] 
3.0.0 :021 > b
 => [:b0, :b1] 
3.0.0 :022 > c
 => [:c0, :c1, :c2] 
3.0.0 :020 > d=a.zip(b,c)
 => [[:a3, :b0, :c0], [:a0, :b1, :c1], [:a1, nil, :c2], [:a2, nil, nil]] 

** If any array in other_arrays is larger than self, fills to self.it ignored:
 => [:b0, :b1, :b2, :b3, :b4] 
 => [[:a0, :b0, :c0], [:a1, :b1, :c1], [:a2, :b2, :c2]] 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26. union function
3.0.0 :025 > a |b |c
 => [:a3, :a0, :a1, :a2, :b0, :b1, :c0, :c1, :c2] 

** we can union array by union methods also like:
3.0.0 :026 > [0,1,2,3].union([0,1],[1,2,3,4])
 => [0, 1, 2, 3, 4] 
3.0.0 :027 > [0,1,2,3].union([0,11],[1,22,33,4])
 => [0, 1, 2, 3, 11, 22, 33, 4] 
3.0.0 :026 > [0,1,2,3].union([0,1],[1,2,3,4])
 => [0, 1, 2, 3, 4] 
3.0.0 :027 > [0,1,2,3].union([0,11],[1,22,33,4])
 => [0, 1, 2, 3, 11, 22, 33, 4] 

** intersection
3.0.0 :006 > [1,2,3,4,'jaya'].intersection([1,2,0])
 => [1, 2] 

** transpose 
3.0.0 :029 > [0,1,2,3].union([1,3,8,9])
 => [0, 1, 2, 3, 8, 9] 
3.0.0 :030 > a=[[1,2,3,4],[2,4,5,6],[1,4,8,9]]
 => [[1, 2, 3, 4], [2, 4, 5, 6], [1, 4, 8, 9]] 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
27. take(n) # its take elements according to user wants 
3.0.0 :039 > a=[2,3,4,5,6]
 => [2, 3, 4, 5, 6] 
3.0.0 :040 > a.take(1)
 => [2] 
3.0.0 :041 > a.take(56)
 => [2, 3, 4, 5, 6] 
3.0.0 :042 > a.take(5)
 => [2, 3, 4, 5, 6] 

** take_while
3.0.0 :044 > a.take_while{|element| element<3}
 => [2] 
3.0.0 :045 > a.take_while{|element| element<5}
 => [2, 3, 4] 

** slice method  # it does not return result if we enter negative index
3.0.0 :065 > a1=['jayapal','pal',1,2,3,'w','e']
 => ["jayapal", "pal", 1, 2, 3, "w", "e"] 
3.0.0 :066 > a1.slice(0..2)
 => ["jayapal", "pal", 1] 
3.0.0 :080 > a1.slice(-1..2)
 => [] 
3.0.0 :081 > a1.slice(1..2)
 => ["pal", 1] 

** shuffle method
3.0.0 :084 > a1.shuffle
 => [1, 2, "w", "pal", "jayapal", 3, "e"] 

** replace method
3.0.0 :008 > a
 => ["jaya", "pal", "mayank", 1, 2, 3] 
3.0.0 :009 > a.replace(["jaya", "pal", "mayank", 1, 2, 9])
 => ["jaya", "pal", "mayank", 1, 2, 9] 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
28.sum() # its sum of the array 
3.0.0 :050 > b=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.0 :051 > b.sum
 => 15 
3.0.0 :052 > b.sum(100)
 => 115 

sum by for each loop:-
3.0.0 :055 > s=b.sum{ |element| element.to_i}
 => 15 

** sort method
3.0.0 :057 > a=[2,3,1,2,5,4,3]
 => [2, 3, 1, 2, 5, 4, 3] 
3.0.0 :058 > a.sort
 => [1, 2, 2, 3, 3, 4, 5] 

* sort according to size of array by sory_by method:
3.0.0 :064 > a.sort_by{|element| element.size}
 => ["c", "bb", "dd", "aaa"] 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29. select method
 Particular method can be select 
3.0.0 :092 > arr1.select{|element| element.to_s.start_with?('b')}
 => [:bar]

** rotate method
When no argument given, rotates the first element to the last position:
3.0.0 :107 > j1=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.0 :108 > j1.rotate
 => [2, 3, 4, 1] 

When given a non-negative Integer count, rotates count elements from the beginning to the end:
 [1, 2, 3, 4] 
3.0.0 :109 > j1.rotate(2)
 => [3, 4, 1, 2] 
3.0.0 :110 > j1.rotate(3)
 => [4, 1, 2, 3] 
3.0.0 :111 > j1.rotate(1)
 => [2, 3, 4, 1] 
3.0.0 :112 > j1.rotate(4)
 => [1, 2, 3, 4] 

When given a negative Integer count, rotates in the opposite direction, from end to beginning
 [1, 2, 3, 4] 
3.0.0 :113 > j1.rotate(-1)
 => [4, 1, 2, 3] 
3.0.0 :114 > j1.rotate(-3)
 => [2, 3, 4, 1] 

** reverse method # it reverse the elements in reverse order
3.0.0 :116 > j1
 => [1, 2, 3, 4] 
3.0.0 :117 > j1.reverse
 => [4, 3, 2, 1] 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
30.combination : make a combination of element according to user requirements but it cannot use the same element more than 1 time ** No. of combination = (n+1)*(n+2)/2

=>name=["jaya", "monika", "charu", 1, 2]
3.0.0 :128 > name.combination(2){ |values| puts"#{values}"} # n=2 the (2+1)*(2+2)/ 2 = 6combinations
["jaya", "monika"]
["jaya", "charu"]
["jaya", 1]
["monika", "charu"]
["monika", 1]
["charu", 1]
["charu", 2]
[1, 2]

* permutation: make combiantions of elements according to user requirements but it cacnot use the same element more than 1 time ** No of permutation= size**n
=>name=["jaya", "monika", "charu", 1, 2]
3.0.0 :139 > name.permutation(2){ |values| puts"#{values}"}
["jaya", "monika"]
["jaya", "charu"]
["jaya", 1]
["jaya", 2]
["monika", "jaya"]
["monika", "charu"]
["monika", 1]
["monika", 2]
["charu", "jaya"]
["charu", "monika"]
["charu", 1]
["charu", 2]
[1, "jaya"]
[1, "monika"]
[1, "charu"]
[1, 2]
[2, "jaya"]
[2, "monika"]
[2, "charu"]
[2, 1]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
31.max,min,minmax methods 
* max method

3.0.0 :144 > a=[1,2,3,4,5]
3.0.0 :145 > a.max
 => 5 
3.0.0 :149 > a.max(3)
 => [5, 4, 3] 
3.0.0 :150 > a.max(4)
 => [5, 4, 3, 2] 
3.0.0 :151 > a.max(2)
 => [5, 4] 
* min method

3.0.0 :152 > a=[1,2,3,4,5,1,3,6]
 => [1, 2, 3, 4, 5, 1, 3, 6] 
3.0.0 :153 > a.min
 => 1 
3.0.0 :154 > a.min(3)
 => [1, 1, 2] 
3.0.0 :155 > a.min(5)
 => [1, 1, 2, 3, 3] 
* minmax method

 => [1, 2, 3, 4, 5, 1, 3, 6] 
3.0.0 :157 > a.minmax
 => [1, 6] 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
32. join method
Returns the new String formed by joining the array elements after conversion.

3.0.0 :001 > a=['jaya','pal','mayank',1,2,3]
 => ["jaya", "pal", "mayank", 1, 2, 3] 
3.0.0 :002 > a.join
 => "jayapalmayank123" 
3.0.0 :003 > a1=['jaya',['pal','mayank'],[1,2],3]
 => ["jaya", ["pal", "mayank"], [1, 2], 3] 
3.0.0 :004 > a1.join
 => "jayapalmayank123"
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
33.flatten # replace array according to the level like flatten(0)= it return same array,if flatten(1)= it replace  the first array of array with self and so on.
3.0.0 :030 > arr=[1,2,[1,2,3,[1,2,3,4,5],9],9,0]
 => [1, 2, [1, 2, 3, [1, 2, 3, 4, 5], 9], 9, 0] 
3.0.0 :031 > arr.flatten(1)
 => [1, 2, 1, 2, 3, [1, 2, 3, 4, 5], 9, 9, 0] 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
34.fill method

3.0.0 :003 > a1=[1,2,3,4,5,6,7]
3.0.0 :004 > a1.fill(1)
 => [1, 1, 1, 1, 1, 1, 1] 
3.0.0 :008 > a1=[1,2,3,4,5,6,7]
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :009 > a1.fill(1,5)
 => [1, 2, 3, 4, 5, 1, 1] 
3.0.0 :010 > a1=[1,2,3,4,5,6,7]
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :011 > a1.fill(1,2,2)
 => [1, 2, 1, 1, 5, 6, 7] 
3.0.0 :012 > a1=[1,2,3,4,5,6,7]
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.0 :013 > a1.fill(1,-2,2)
 => [1, 2, 3, 4, 5, 1, 1] 


 
