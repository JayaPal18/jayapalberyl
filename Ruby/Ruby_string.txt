
Strings:-
A String object holds and manipulates an arbitrary sequence of bytes, typically representing characters.
 Public class methods
1. ::new

3.0.0 :001 > s=String.new #when argument passed it returns empty string
 => "" 
3.0.0 :002 > s=String.new("Que veut dire \u{e7}a?")
 => "Que veut dire ça?" 
3.0.0 :003 > s=String.new(encoding:'ASCII') #With keyword encoding, returns a copy of str with the specified encoding:
 => "" 
3.0.0 :004 > s=String.new('foo',encoding:'ASCII')
 => "foo" 
3.0.0 :005 > String.new(capacity:1) #With keyword capacity, returns a copy of str; the given capacity may set the size of the internal buffer, which may affect performance
 => "" 
3.0.0 :006 > String.new(capacity:4096)
 => "" 
3.0.0 :007 > String.new('hello',encoding:'UTF-8',capacity:25) # The string, encoding, and capacity arguments may all be used together:
 => "hello" 
2.string * integer-> new_string
3.0.0 :003 > "Jaya" * 2
 => "JayaJaya" 
3.0.0 :004 > "Jaya Pal " * 2
 => "Jaya Pal Jaya Pal " 

3.String + other_string ->new_string
3.0.0 :006 > "Hello jaya" +self.to_s  #if nothing is added then it bydefault added main  
 => "Hello jayamain" 
3.0.0 :007 > "Hello jaya" +"I live i faridabad"
 => "Hello jayaI live i faridabad" 
3.0.0 :008 > "Hello jaya" +" ,I live in faridabad"
 => "Hello jaya ,I live in faridabad" 

4.string << object ->str
<< sign used for concatenation
3.0.0 :009 > s="jaya"
 => "jaya" 
3.0.0 :010 > s << "pal"
 => "jayapal" 
3.0.0 :011 > s << "sharma"
 => "jayapalsharma" 
3.0.0 :012 > 

5.string<=> other_string -> -1,0,1 or nil # <=>sign used for comparison
1 if other_string is smaller.

0 if the two are equal.

-1 if other_string is larger.

nil if the two are incomparable.
3.0.0 :012 > 'ram' <=> 'sh'
 => 1 
3.0.0 :013 > 'ram' <=> 'ram'
 => 0 
3.0.0 :014 > 'ram' <=> 'jayapal'
 => -1 

6.string == object → true or false
3.0.0 :016 > s='ram'
 => "ram" 
3.0.0 :018 > s == 'ram'
 => true 
3.0.0 :019 > s == 'RAM'
 => false 

7.string === object -> true or false
3.0.0 :016 > s='ram'
 => "ram" 
3.0.0 :018 > s === 'ram'
 => true 
9.string[index] → new_string
string[start, length] → new_string or nil
string[range] → new_string or nil
string[regexp, capture = 0] → new_string or nil
string[substring] → new_string or nil

3.0.0 :022 > 'bar'[2]
 => "r" 
3.0.0 :023 > 'ganag'[3]
 => "a" 
3.0.0 :024 > 'raman'[0,3]
 => "ram" 
3.0.0 :025 > 'raman'[-2,2]
 => "an" 
3.0.0 :026 > 'foo'['oo']
 => "oo" 
3.0.0 :027 > 'foo'['ss']
 => nil 
3.0.0 :028 > 'akashsharma'[5]
 => "s" 

10.bytesize → integer
   byteslice(integer) → new_str or nilclick to toggle source
   byteslice(integer, integer) → new_str or nil 
   byteslice(range) → new_str or nil
3.0.0 :029 > 'hello'.bytesize
 => 5 
3.0.0 :030 > 'ramprakash'.bytesize
 => 10 
3.0.0 :031 > 'ramprakash'.byteslice(1)
 => "a" 
3.0.0 :032 > 'ramprakash'.byteslice(-1)
 => "h" 
3.0.0 :033 > 'ramprakash'.byteslice(-1,-2)
 => nil 
3.0.0 :034 > 'ramprakash'.byteslice(1,2)
 => "am" 
3.0.0 :035 > 'ramprakash'.byteslice(1,-2)
 => nil 
3.0.0 :036 > 'ramprakash'.byteslice(1..2)
 => "am" 
3.0.0 :037 > 'hello'.capitalize
 => "Hello" 
3.0.0 :038 > 'Aello'.capitalize
 => "Aello" 
3.0.0 :039 > '123A'.capitalize
 => "123a" 

