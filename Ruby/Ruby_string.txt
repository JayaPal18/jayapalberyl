
Strings:-
A String object holds and manipulates an arbitrary sequence of bytes, typically representing characters.
 Public class methods
1. ::new

3.0.0 :001 > s=String.new #when argument passed it returns empty string
 => "" 
3.0.0 :002 > s=String.new("Que veut dire \u{e7}a?")
 => "Que veut dire ça?" 
3.0.0 :003 > s=String.new(encoding:'ASCII') #With keyword encoding, returns a copy of str with the specified encoding:
 => "" 
3.0.0 :004 > s=String.new('foo',encoding:'ASCII')
 => "foo" 
3.0.0 :005 > String.new(capacity:1) #With keyword capacity, returns a copy of str; the given capacity may set the size of the internal buffer, which may affect performance
 => "" 
3.0.0 :006 > String.new(capacity:4096)
 => "" 
3.0.0 :007 > String.new('hello',encoding:'UTF-8',capacity:25) # The string, encoding, and capacity arguments may all be used together:
 => "hello" 
2.string * integer-> new_string
3.0.0 :003 > "Jaya" * 2
 => "JayaJaya" 
3.0.0 :004 > "Jaya Pal " * 2
 => "Jaya Pal Jaya Pal " 

3.String + other_string ->new_string
3.0.0 :006 > "Hello jaya" +self.to_s  #if nothing is added then it bydefault added main  
 => "Hello jayamain" 
3.0.0 :007 > "Hello jaya" +"I live i faridabad"
 => "Hello jayaI live i faridabad" 
3.0.0 :008 > "Hello jaya" +" ,I live in faridabad"
 => "Hello jaya ,I live in faridabad" 

4.string << object ->str
<< sign used for concatenation
3.0.0 :009 > s="jaya"
 => "jaya" 
3.0.0 :010 > s << "pal"
 => "jayapal" 
3.0.0 :011 > s << "sharma"
 => "jayapalsharma" 
3.0.0 :012 > 

5.string<=> other_string -> -1,0,1 or nil # <=>sign used for comparison
1 if other_string is smaller.

0 if the two are equal.

-1 if other_string is larger.

nil if the two are incomparable.
3.0.0 :012 > 'ram' <=> 'sh'
 => 1 
3.0.0 :013 > 'ram' <=> 'ram'
 => 0 
3.0.0 :014 > 'ram' <=> 'jayapal'
 => -1 

6.string == object → true or false
3.0.0 :016 > s='ram'
 => "ram" 
3.0.0 :018 > s == 'ram'
 => true 
3.0.0 :019 > s == 'RAM'
 => false 

7.string === object -> true or false
3.0.0 :016 > s='ram'
 => "ram" 
3.0.0 :018 > s === 'ram'
 => true 
9.string[index] → new_string
string[start, length] → new_string or nil
string[range] → new_string or nil
string[regexp, capture = 0] → new_string or nil
string[substring] → new_string or nil

3.0.0 :022 > 'bar'[2]
 => "r" 
3.0.0 :023 > 'ganag'[3]
 => "a" 
3.0.0 :024 > 'raman'[0,3]
 => "ram" 
3.0.0 :025 > 'raman'[-2,2]
 => "an" 
3.0.0 :026 > 'foo'['oo']
 => "oo" 
3.0.0 :027 > 'foo'['ss']
 => nil 
3.0.0 :028 > 'akashsharma'[5]
 => "s" 

10.bytesize → integer
   byteslice(integer) → new_str or nilclick to toggle source
   byteslice(integer, integer) → new_str or nil 
   byteslice(range) → new_str or nil
3.0.0 :029 > 'hello'.bytesize
 => 5 
3.0.0 :030 > 'ramprakash'.bytesize
 => 10 
3.0.0 :031 > 'ramprakash'.byteslice(1)
 => "a" 
3.0.0 :032 > 'ramprakash'.byteslice(-1)
 => "h" 
3.0.0 :033 > 'ramprakash'.byteslice(-1,-2)
 => nil 
3.0.0 :034 > 'ramprakash'.byteslice(1,2)
 => "am" 
3.0.0 :035 > 'ramprakash'.byteslice(1,-2)
 => nil 
3.0.0 :036 > 'ramprakash'.byteslice(1..2)
 => "am" 
3.0.0 :037 > 'hello'.capitalize
 => "Hello" 
3.0.0 :038 > 'Aello'.capitalize
 => "Aello" 
3.0.0 :039 > '123A'.capitalize
 => "123a" 

11.casecmp(other_str) → -1, 0, 1, or nil
3.0.0 :001 > 'foo'.casecmp('foo')
 => 0 
3.0.0 :002 > 'foo'.casecmp('food')
 => -1 
3.0.0 :003 > 'foodesd'.casecmp('food')
 => 1 
3.0.0 :004 > 'ram' <=> 'sharma'
 => -1 
casesmp>(other_str) -> true or false
3.0.0 :005 > 'ram'.casecmp? 'sharma'
 => false 
3.0.0 :006 > 'ram'.casecmp? 'ram'
 => true 

12.center method
3.0.0 :007 > 'hello'.center(5)
 => "hello" 
3.0.0 :008 > 'hello'.center(1)
 => "hello" 
3.0.0 :009 > 'hello'.center(19)
 => "       hello       " 
3.0.0 :010 > 'hello'.center(19,'jaya')
 => "jayajayhellojayajay" 

13.chomp
3.0.0 :014 > "hello\n\r".chomp
 => "hello\n" 
3.0.0 :015 > "hello\n\r\n".chomp
 => "hello\n" 

14.3.0.0 :017"> "hello".chop
 => "hell" 
3.0.0 :018 > 'ram'.chop.chop
 => "r" 
3.0.0 :019 > 'akash'.chop.chop.chop
 => "ak" 
15.chr
3.0.0 :020 > a='jayapal'
 => "jayapal" 
3.0.0 :021 > a.chr
 => "j" 
3.0.0 :022 > a.clear
 => "" 
16.concat
3.0.0 :030 > k='kajal'
3.0.0 :031 > 
 => "kajal" 
3.0.0 :032 > k.concat('sharma','meena')
 => "kajalsharmameena" 
3.0.0 :033 > k.concat(' sharma ',' meena ')
 => "kajalsharmameena sharma  meena " 

17.count

3.0.0 :034 > a='hello world'
 => "hello world" 
3.0.0 :035 > a.count "lo"
 => 5 
3.0.0 :036 > a.count "lo" ,"o"
 => 2 

18.delete
3.0.0 :041 > 'jayapal'.delete 'pal'
 => "jy" 
3.0.0 :042 > 'jayapal'.delete 'jay','^j'
 => "jpl" 
3.0.0 :043 > 'hello'.delete_prefix('hel')
 => "lo" 
3.0.0 :046 > 'hello'.delete_suffix('llo')
 => "he" 
19.each_char {|cstr| block } → str
3.0.0 :050 > 'hello'.each_char {|c| print c, ' '}
h e l l o  => "hello" 

20.empty?
3.0.0 :051 > 'hello'.empty?
 => false 
3.0.0 :052'> ' '.empty?
 => false 
3.0.0 :053 > ''.empty?
 => true 

21 eql?
3.0.0 :058 > 'hello'.eql?('hello')
 => true 
3.0.0 :059 > 'hello'.eql?('helllo')
 => false 

22.end_with?
3.0.0 :054 > 'hello'.end_with?('llo')
 => true 
3.0.0 :055 > 'hello'.end_with?('rama')
 => false 

23.hex -> integer
3.0.0 :001 > "0x0a".hex
 => 10 
3.0.0 :002 > "-1234".hex
 => -4660 

24.include?
3.0.0 :004 > "hello".include? "lo"
 => true 
3.0.0 :005 > "hello".include? "oll"
 => false 
3.0.0 :006 > "hello".include? "llo"
 => true 

25.index
3.0.0 :007 > 'jaya'.index('j')
 => 0 
3.0.0 :008 > 'jaya'.index('a')
 => 1 
3.0.0 :009 > 'jaya'.index('ya')
 => 2 
3.0.0 :010 > 'jaya'.index('jaya')
 => 0 

26.replace
3.0.0 :011 > s='hello'
3.0.0 :012 > s.replace "world"
 => "world"

27.insert
3.0.0 :014 > 'hello'.insert(1,'bar')
 => "hbarello" 
3.0.0 :015 > 'hello'.insert(-2,'bar')
 => "hellbaro" 

28.lines(separator=$/, chomp: false) → an_array
3.0.0 :019 > "hello\nworld\n".lines
 => ["hello\n", "world\n"] 
3.0.0 :020 > "hello world ".lines(' ')
 => ["hello ", "world "] 
3.0.0 :021 > "hello world ".lines(chomp:true)
 => ["hello world "] 

29. length
3.0.0 :018 > "hello".length
 => 5 
30.lstrip
3.0.0 :026 > ' hello  '.lstrip
 => "hello  " 
3.0.0 :027 > 'hello '.rstrip
 => "hello" 
3.0.0 :028 > ' hello '.strip
 => "hello" 

31.ljust
3.0.0 :025 > 'hello'.ljust(19,'1234')
 => "hello12341234123412" 

