
Date methods:
 
 date provides 2 classes: Date and dateTime
A Date object is created with Date::new, Date::jd, Date::ordinal, Date::commercial, Date::parse, Date::strptime, Date::today, Time#to_date, etc.

date methods

3.0.0 :002 > require 'date'
 => true 
3.0.0 :003 > Date.new(1999-1-18) [its created object]
 => #<Date: 1980-01-01 ((2444240j,0s,0n),+0s,2299161j)> 

3.0.0 :004 > Date.jd(2444240) [with the help of jd we can know the actual date
 => #<Date: 1980-01-01 ((2444240j,0s,0n),+0s,2299161j)> 

3.0.0 :005 > Date.ordinal(2002,87) [ordinal function return the date by calculating the monthwise dates like if we know after 40 days of 2001 what date can be found it calculates 31+09=40 then it returns 9th feb 2001]
=> #<Date: 2002-03-28 ((2452362j,0s,0n),+0s,2299161j)> 

3.0.0 :006 > Date.commercial(2022,5,6) [its return the date 5 shows the week and 6 shows the day then its calculated this ]
 => #<Date: 2022-02-05 ((2459616j,0s,0n),+0s,2299161j)> 

3.0.0 :007 > Date.parse('2022-01-03')
 => #<Date: 2022-01-03 ((2459583j,0s,0n),+0s,2299161j)> 

3.0.0 :008 > Date.strptime('03-02-2011','%d-%m-%Y') [ its return the date in proper date format ]
 => #<Date: 2011-02-03 ((2455596j,0s,0n),+0s,2299161j)> 

3.0.0 :009 > Time.new(2022,9,3).to_date [ its convert the date format]
 => #<Date: 2022-09-03 ((2459826j,0s,0n),+0s,2299161j)> 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Date objects methods:

3.0.0 :010 > d=Date.parse('2nd april 2022')
 => #<Date: 2022-04-02 ((2459672j,0s,0n),+0s,2299161j)> 
3.0.0 :011 > d.year
 => 2022 
3.0.0 :012 > d.mon
 => 4 
3.0.0 :013 > d.mday [mday stands for month day]
 => 2 
3.0.0 :014 > d.wday [wday stands for week day]
 => 6 
3.0.0 :015 > d=d+1
 => #<Date: 2022-04-03 ((2459673j,0s,0n),+0s,2299161j)> 
3.0.0 :016 > d.mday
 => 3 
3.0.0 :017 > d.strftime('%a %d %b %Y')
 => "Sun 03 Apr 2022" 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 ** _Parse the given representation of date and time, and returns a hash of parsed elements.

3.0.0 :019 > Date._parse('2000-09-10')
 => {:year=>2000, :mon=>9, :mday=>10} 

 ** _strptime Parses the given representation of date and time with the given template, and returns a hash of parsed elements.
3.0.0 :021 > Date._strptime('2000-09-10','%Y-%m-%d')
 => {:year=>2000, :mon=>9, :mday=>10} 

 ** gregorian_leap?(year) → bool[Returns true if the given year is a leap year of the proleptic Gregorian calendar]
 3.0.0 :023 > Date.gregorian_leap?(1999)
 => false 
3.0.0 :024 > Date.gregorian_leap?(2002)
 => false 
3.0.0 :025 > Date.gregorian_leap?(2004)
 => true 

 ** julian_leap?(year) → bool[Returns true if the given year is a leap year of the proleptic Julian calendar]
3.0.0 :028 > Date.julian_leap?(2000)
 => true 
3.0.0 :029 > Date.julian_leap?(1990)
 => false 

 ** Date.valid_date?()
3.0.0 :033 > Date.valid_date?(2000,9,111)
 => false 
3.0.0 :034 > Date.valid_date?(2000,9,11)
 => true 

 ** Date.today
3.0.0 :035 > Date.today
 => #<Date: 2022-04-08 ((2459678j,0s,0n),+0s,2299161j)> 

 ** Date.commercial_date?()
3.0.0 :038 > Date.valid_commercial?(2000,5,14)
 => false 

 ** Date.valid_ordinal?()
3.0.0 :039 > Date.valid_ordinal?(2000,367)
 => false 
3.0.0 :040 > Date.valid_ordinal?(2000,366)
 => true 

 ** xmlschema creates a new Date object by parsing from a string according to some typical XML Schema formats.
3.0.0 :041 > Date.xmlschema('1999-01-18')
 => #<Date: 1999-01-18 ((2451197j,0s,0n),+0s,2299161j)>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Public instance methods

3.0.0 :055 > m=Date.parse('19 dec 2022')
 => #<Date: 2022-12-19 ((2459933j,0s,0n),+0s,2299161j)> 

3.0.0 :056 > m
 => #<Date: 2022-12-19 ((2459933j,0s,0n),+0s,2299161j)> 

3.0.0 :057 > m+=2
 => #<Date: 2022-12-21 ((2459935j,0s,0n),+0s,2299161j)> 

3.0.0 :058 > m-=9
 => #<Date: 2022-12-12 ((2459926j,0s,0n),+0s,2299161j)>

d << n → date
3.0.0 :063 > Date.new(1999,10,18) << 1
 => #<Date: 1999-09-18 ((2451440j,0s,0n),+0s,2299161j)> 
3.0.0 :064 > Date.new(1999,1,18) << 1
 => #<Date: 1998-12-18 ((2451166j,0s,0n),+0s,2299161j)> 

3.0.0 :065 > Date.new(1999,1,18) << 1 << 2
 => #<Date: 1998-10-18 ((2451105j,0s,0n),+0s,2299161j)> 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
comparison functions
-1,0,1
3.0.0 :004 > require 'date'
 => true 
3.0.0 :005 > Date.new(1999,10,8) <=> Date.new(1999,8,10)
 => 1 
3.0.0 :006 > Date.new(1999,1,8) <=> Date.new(1999,8,10)
 => -1 
3.0.0 :007 > Date.new(1999,8,10) <=> Date.new(1999,8,10)
 => 0 
3.0.0 :008 > Date.new(1999,8,10) ===  Date.new(1999,9,10)
 => false 
3.0.0 :009 > Date.new(1999,8,10) ===  Date.new(1999,8,10)
 => true 
3.0.0 :010 > Date.new(1999,8,10) >> 2
 => #<Date: 1999-10-10 ((2451462j,0s,0n),+0s,2299161j)>

** ajd : returns the astronomical julian day number.This is the fractional number,which is not adjusted by the offset.
3.0.0 :011 > DateTime.new(2001,2,3,4,5,6,'+7').ajd
 => (11769328217/4800)

3.0.0 :014 > DateTime.new(2001,10,9).cwyear [ it returns the year]
 => 2001 
3.0.0 :015 > DateTime.new(2001,10,9).cweek  [ its returns the week till date] 1-53 weeks
 => 41 
3.0.0 :016 > DateTime.new(2001,10,9).cwday  [ its returns the count of week day]1-7 1=monday
 => 2 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 gregorian? → bool 

Returns true if the date is on or after the day of calendar reform.
3.0.0 :023 > Date.new(1581,12,30).gregorian?
 => false 

jd returns the julian day number
3.0.0 :024 > Date.new(1581,12,30).jd
 => 2298882 

3.0.0 :027 > Date.new(1999,1,18).ld
 => 152037 

3.0.0 :039 > Date.new(2022,4,6).wednesday?
 => true 
3.0.0 :040 > Date.new(2022,4,12).wednesday?
 => false 

3.0.0 :042 > Date.new(2022,4,13).mon
 => 4 

3.0.0 :043 > Date.new(2022,4,13).next_year(2)
 => #<Date: 2024-04-13 ((2460414j,0s,0n),+0s,2299161j)> 
3.0.0 :044 > Date.new(2022,4,13).next_year
 => #<Date: 2023-04-13 ((2460048j,0s,0n),+0s,2299161j)> 
3.0.0 :045 > Date.new(2022,4,13).next_mon

3.0.0 :046 > Date.new(2022,4,13).prev_year
 => #<Date: 2021-04-13 ((2459318j,0s,0n),+0s,2299161j)> 
3.0.0 :047 > Date.new(2022,4,13).prev_year(3)
 => #<Date: 2019-04-13 ((2458587j,0s,0n),+0s,2299161j)>

** to_s = convert date to string
3.0.0 :048 > Date.new(2000,11,10).to_s
 => "2000-11-10" 

** yday = to count number of days
3.0.0 :051 > Date.new(2000,11,10).yday
 => 315 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** difference between strptime and strftime
strptime :- the given representation of date and time with the given template
3.0.0 :004 > Date.strptime('10-10-2001' '%d-%m-%Y')
 => #<Date: 0010-10-20 ((1725003j,0s,0n),+0s,2299161j)> 
3.0.0 :005 > Date.strptime('2010-10-20' '%Y-%m-%d')
 => #<Date: 2010-10-20 ((2455490j,0s,0n),+0s,2299161j)> 

strftime:- Formats date according to the directives in the given format string. The directives begin with a percent (%A) character.
%A means fullweakday name shown
for example
3.0.0 :009 > d=Date.today
 => #<Date: 2022-05-02 ((2459702j,0s,0n),+0s,2299161j)> 
3.0.0 :010 > d.strftime("%A,%d,%b,%Y")
3.0.0 :011 >   
 => "Monday,02,May,2022"
------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
** program to count how many sat in particular year
require 'date'
class Test
  def sat(start,endd)
  start_date=Date.parse(start)
  end_date=Date.parse(endd)
 total= (start_date..end_date).count{|d| d.saturday?}
   print total
end
end
t1=Test.new
t1.sat("1 jan 1999","31 dec 1999")
puts

output:-

beryl@beryl-To-be-filled-by-O-E-M:~/Desktop$ ruby time.rb
53

** how many days between two particular date
require 'date'
class Test
  def sat(start,endd)
  start_date=Date.parse(start)
  end_date=Date.parse(endd)
 total= (start_date..end_date).count{|d| d.day}
   print total

 end
end
t1=Test.new
t1.sat("18 january 1996","8 september 1999")
puts

output:-
beryl@beryl-To-be-filled-by-O-E-M:~/Desktop$ ruby time.rb
1330


----------------------------------------------------------------------------------------------------------------------------------------------------------------------
date (Year, Month, Day):
  %Y - Year with century (can be negative, 4 digits at least)
          -0001, 0000, 1995, 2009, 14292, etc.
  %C - year / 100 (round down.  20 in 2009)
  %y - year % 100 (00..99)

  %m - Month of the year, zero-padded (01..12)
          %_m  blank-padded ( 1..12)
          %-m  no-padded (1..12)
  %B - The full month name (``January'')
          %^B  uppercased (``JANUARY'')
  %b - The abbreviated month name (``Jan'')
          %^b  uppercased (``JAN'')
  %h - Equivalent to %b

  %d - Day of the month, zero-padded (01..31)
          %-d  no-padded (1..31)
  %e - Day of the month, blank-padded ( 1..31)

  %j - Day of the year (001..366)

Time (Hour, Minute, Second, Subsecond):
  %H - Hour of the day, 24-hour clock, zero-padded (00..23)
  %k - Hour of the day, 24-hour clock, blank-padded ( 0..23)
  %I - Hour of the day, 12-hour clock, zero-padded (01..12)
  %l - Hour of the day, 12-hour clock, blank-padded ( 1..12)
  %P - Meridian indicator, lowercase (``am'' or ``pm'')
  %p - Meridian indicator, uppercase (``AM'' or ``PM'')

  %M - Minute of the hour (00..59)

  %S - Second of the minute (00..60)

  %L - Millisecond of the second (000..999)
  %N - Fractional seconds digits, default is 9 digits (nanosecond)
          %3N  millisecond (3 digits)   %15N femtosecond (15 digits)
          %6N  microsecond (6 digits)   %18N attosecond  (18 digits)
          %9N  nanosecond  (9 digits)   %21N zeptosecond (21 digits)
          %12N picosecond (12 digits)   %24N yoctosecond (24 digits)

ime zone:
  %z - Time zone as hour and minute offset from UTC (e.g. +0900)
          %:z - hour and minute offset from UTC with a colon (e.g. +09:00)
          %::z - hour, minute and second offset from UTC (e.g. +09:00:00)
          %:::z - hour, minute and second offset from UTC
                                            (e.g. +09, +09:30, +09:30:30)
  %Z - Equivalent to %:z (e.g. +09:00)

Weekday:
  %A - The full weekday name (``Sunday'')
          %^A  uppercased (``SUNDAY'')
  %a - The abbreviated name (``Sun'')
          %^a  uppercased (``SUN'')
  %u - Day of the week (Monday is 1, 1..7)
  %w - Day of the week (Sunday is 0, 0..6)

ISO 8601 week-based year and week number:
The week 1 of YYYY starts with a Monday and includes YYYY-01-04.
The days in the year before the first week are in the last week of
the previous year.
  %G - The week-based year
  %g - The last 2 digits of the week-based year (00..99)
  %V - Week number of the week-based year (01..53)

Week number:
The week 1 of YYYY starts with a Sunday or Monday (according to %U
or %W).  The days in the year before the first week are in week 0.
  %U - Week number of the year.  The week starts with Sunday.  (00..53)
  %W - Week number of the year.  The week starts with Monday.  (00..53)

Seconds since the Unix Epoch:
  %s - Number of seconds since 1970-01-01 00:00:00 UTC.
  %Q - Number of milliseconds since 1970-01-01 00:00:00 UTC.

Literal string:
  %n - Newline character (\n)
  %t - Tab character (\t)
  %% - Literal ``%'' character

Combination:
  %c - date and time (%a %b %e %T %Y)
  %D - Date (%m/%d/%y)
  %F - The ISO 8601 date format (%Y-%m-%d)
  %v - VMS date (%e-%^b-%Y)
  %x - Same as %D
  %X - Same as %T
  %r - 12-hour time (%I:%M:%S %p)
  %R - 24-hour time (%H:%M)
  %T - 24-hour time (%H:%M:%S)
  %+ - date(1) (%a %b %e %H:%M:%S %Z %Y)

%Y%m%d           => 20071119                  Calendar date (basic)
%F               => 2007-11-19                Calendar date (extended)
%Y-%m            => 2007-11                   Calendar date, reduced accuracy, specific month
%Y               => 2007                      Calendar date, reduced accuracy, specific year
%C               => 20                        Calendar date, reduced accuracy, specific century
%Y%j             => 2007323                   Ordinal date (basic)
%Y-%j            => 2007-323                  Ordinal date (extended)
%GW%V%u          => 2007W471                  Week date (basic)
%G-W%V-%u        => 2007-W47-1                Week date (extended)
%GW%V            => 2007W47                   Week date, reduced accuracy, specific week (basic)
%G-W%V           => 2007-W47                  Week date, reduced accuracy, specific week (extended)
%H%M%S           => 083748                    Local time (basic)
%T               => 08:37:48                  Local time (extended)
%H%M             => 0837                      Local time, reduced accuracy, specific minute (basic)
%H:%M            => 08:37                     Local time, reduced accuracy, specific minute (extended)
%H               => 08                        Local time, reduced accuracy, specific hour
%H%M%S,%L        => 083748,000                Local time with decimal fraction, comma as decimal sign (basic)
%T,%L            => 08:37:48,000              Local time with decimal fraction, comma as decimal sign (extended)
%H%M%S.%L        => 083748.000                Local time with decimal fraction, full stop as decimal sign (basic)
%T.%L            => 08:37:48.000              Local time with decimal fraction, full stop as decimal sign (extended)
%H%M%S%z         => 083748-0600               Local time and the difference from UTC (basic)
%T%:z            => 08:37:48-06:00            Local time and the difference from UTC (extended)
%Y%m%dT%H%M%S%z  => 20071119T083748-0600      Date and time of day for calendar date (basic)
%FT%T%:z         => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended)
%Y%jT%H%M%S%z    => 2007323T083748-0600       Date and time of day for ordinal date (basic)
%Y-%jT%T%:z      => 2007-323T08:37:48-06:00   Date and time of day for ordinal date (extended)
%GW%V%uT%H%M%S%z => 2007W471T083748-0600      Date and time of day for week date (basic)
%G-W%V-%uT%T%:z  => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended)
%Y%m%dT%H%M      => 20071119T0837             Calendar date and local time (basic)
%FT%R            => 2007-11-19T08:37          Calendar date and local time (extended)
%Y%jT%H%MZ       => 2007323T0837Z             Ordinal date and UTC of day (basic)
%Y-%jT%RZ        => 2007-323T08:37Z           Ordinal date and UTC of day (extended)
%GW%V%uT%H%M%z   => 2007W471T0837-0600        Week date and local time and difference from UTC (basic)
%G-W%V-%uT%R%:z  => 2007-W47-1T08:37-06:00    Week date and local time and difference from UTC (extended)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Datetime methods:

* httpdate(string='Mon, 01 Jan -4712 00:00:00 GMT'[, start=Date::ITALY]) → datetime
3.0.0 :003 > require 'date'
 => true 
3.0.0 :004 > DateTime.httpdate('Sat, 03 Feb 2001 04:05:06 GMT')
 => #<DateTime: 2001-02-03T04:05:06+00:00 ((2451944j,14706s,0n),+0s,2299161j)> 

* current time
3.0.0 :005 > DateTime.now
 => #<DateTime: 2022-04-08T15:04:29+05:30 ((2459678j,34469s,745076006n),+19800s,2299161j)> 

------------------------------------------------------------------------------------------------------------------------------------------------------------------
A Datetime has various methods
3.0.0 :009 > d=DateTime.parse('18 feb 2001 04:05:06+02:30')
 => #<DateTime: 2001-02-18T04:05:06+02:30 ((2451959j,5706s,0n),+9000s,2299... 
3.0.0 :010 > d.hour
 => 4 
3.0.0 :011 > d.min
 => 5 
3.0.0 :012 > d.sec
 => 6 
3.0.0 :013 > d.zone
 => "+02:30" 


3.0.0 :014 > DateTime.new(2001,12,3).to_s
 => "2001-12-03T00:00:00+00:00" 
3.0.0 :015 > DateTime.new(2001,12,3).to_date
 => #<Date: 2001-12-03 ((2452247j,0s,0n),+0s,2299161j)> 

3.0.0 :003 > require 'date'
 => true 
3.0.0 :004 > DateTime.rfc2822('Sat, 3 Feb 2001 04:05:06 +0700')
 => #<DateTime: 2001-02-03T04:05:06+07:00 ((2451943j,75906s,0n),+25200s,2299161j)> 

